name: release
on:
  push:
    # tags: # 当我们提交代码为tag 是以'v'开头的时候才会触发自动部署到服务端 如 git push tag v0.1.0
    #   - 'v*'
    branches:
      - main
    #   - dev
jobs:
  build-static:
    runs-on: ubuntu-latest
    steps:
      # 下载源码
      - uses: actions/checkout@v4
        with:
          repository: team-ide/xinleyuan
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
          path: ./

      - run: ls -l
  
      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: package.json
          property: version

      - id: release_check
        run: |
          echo "::set-output name=RELEASE_STATUS::$(curl -I -m 10 -o /dev/null -s -w %{http_code} https://github.com/team-ide/xinleyuan-release/releases/tag/v${{ steps.release_version.outputs.value }})"

      # 读取发布说明
      - name: Read Release Description
        id: release_body
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: juliangruber/read-file-action@v1
        with:
          path: RELEASE.md

      # 发布
      - name: Create Release
        id: create_release
        if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{steps.release_version.outputs.value}}
          release_name: ${{steps.release_version.outputs.value}}
          body: ${{steps.release_body.outputs.content}}
          draft: true # 是否是草稿
          prerelease: false # 是否是预发布

      - run: |
          mkdir release
          echo '{"upload_url":""}' > release/release.json

      - if: ${{ steps.release_check.outputs.RELEASE_STATUS == 404 }}
        run: |
          echo '${{ steps.create_release.outputs.upload_url }}'
          echo '{"upload_url":"${{ steps.create_release.outputs.upload_url }}"}' > release/release.json

      # 打包构建 html
      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      # 准备 electron-template
      - run: |
          chmod +x ./desktop/install-electron-template.sh
          ./desktop/install-electron-template.sh
          mkdir -p electron-template/assets/server/lib

      # npm install
      - run: |
          cd html
          npm install
          npm run build
          cp -rf dist ../release/statics

      # 上传共享资源
      - uses: actions/upload-artifact@v4
        with:
          name: release
          path: release
          include-hidden-files: true

      # 上传共享资源
      - uses: actions/upload-artifact@v4
        with:
          name: electron-template
          path: electron-template
          include-hidden-files: true

  build-linux-amd64:
    runs-on: ubuntu-latest
    steps:
      # 下载源码
      - uses: actions/checkout@v4
        with:
          repository: team-ide/xinleyuan
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
          path: ./

      - run: ls -l

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: package.json
          property: version

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull linux-amd64
        run: docker pull --platform linux/amd64 teamide/build-go-gcc:amd64-1.20.14-7.5.0

      - name: Build linux-amd64
        run: |
          mkdir linux-amd64
          chmod +x server/cmd/build-linux-amd64.sh
          docker run --platform linux/amd64 -v $(pwd):/build teamide/build-go-gcc:amd64-1.20.14-7.5.0 /bin/bash /build/server/cmd/build-linux-amd64.sh ${{ steps.release_version.outputs.value }}

      # 上传共享资源
      - uses: actions/upload-artifact@v4
        with:
          name: linux-amd64
          path: linux-amd64
          include-hidden-files: true

  build-linux:
    needs: ["build-static","build-linux-amd64"]
    runs-on: ubuntu-latest
    steps:
      # 下载源码
      - uses: actions/checkout@v4
        with:
          repository: team-ide/xinleyuan
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
          path: ./

      - run: ls -l

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release
      - uses: actions/download-artifact@v2
        with:
          name: linux-amd64
          path: linux-amd64

      # 读取发布地址
      - id: release_upload_url
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/release.json
          property: upload_url

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: package.json
          property: version

      - run: |
          mkdir -p release/server-linux-amd64/lib
          
          cp -rf release/statics release/server-linux-amd64/statics
          cp -rf server/conf release/server-linux-amd64/conf
          cp -rf docker/server.sh release/server-linux-amd64/server.sh
          chmod +x release/server-linux-amd64/server.sh
          
          cp linux-amd64/server release/server-linux-amd64/server

      # - name: Set up Docker BuildX
      #   uses: docker/setup-buildx-action@v2
      # - name: Login to DockerHub
      #   uses: docker/login-action@v2
      #   with:
      #     #这里用到了github的secrets功能，避免账户和密码随仓库泄露
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      # - if: ${{ steps.release_upload_url.outputs.value != '' }}
      #   name: Build and push amd64
      #   #导入这个模块来完成自动编译和推送
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: .
      #     file: ./Dockerfile-amd64
      #     push: true
      #     #在这里通过加入需要编译的平台和前面配好的QEMU，buildx来达到多平台编译 linux/amd64,linux/arm64,linux/arm
      #     platforms: linux/amd64
      #     #指定用户/仓库名
      #     tags: teamide/xinleyuan-server:latest,teamide/xinleyuan-server:${{ steps.release_version.outputs.value }}

      - run: |
          
          mv release/server-linux-amd64 server-linux-amd64-${{steps.release_version.outputs.value}}
          zip -q -r server-linux-amd64-${{steps.release_version.outputs.value}}.zip server-linux-amd64-${{steps.release_version.outputs.value}}

      # 上传 到 Release
      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.value }} # 上传地址，通过创建Release获取到的
          asset_path: server-linux-amd64-${{steps.release_version.outputs.value}}.zip
          asset_name: server-linux-amd64-${{steps.release_version.outputs.value}}.zip # 上传后的文件名
          asset_content_type: application/zip
  build-window:
    needs: ["build-static"]
    runs-on: windows-latest
    steps:
      # 下载源码
      - uses: actions/checkout@v4
        with:
          repository: team-ide/xinleyuan
          token: ${{ secrets.GH_PAT }} # `GH_PAT` is a secret that contains your PAT
          path: ./

      - run: ls -l

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: release
          path: release

      # 读取发布地址
      - id: release_upload_url
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: release/release.json
          property: upload_url

      # 下载共享资源
      - uses: actions/download-artifact@v2
        with:
          name: electron-template
          path: electron-template

      # 读取发布版本
      - name: Read Release Version
        id: release_version
        uses: ashley-taylor/read-json-property-action@v1.0
        with:
          path: package.json
          property: version

      - name: Install Node and NPM
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - if: ${{ steps.release_upload_url.outputs.value != '' }}
        name: Electron Build
        env:
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd electron-template
          npm install
          npm run postinstall
          npm run build
          npm exec electron-builder -- --win -p always
